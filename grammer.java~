import java.io.*;
import java.util.*;
public class grammer
{
	public static List<List> prod=new ArrayList<List>();
	public static List<String> result=new ArrayList<String>();
	public static void print(String str)
	{
		System.out.println(str);
	}
	public static void leftrec()
	{
		for(int i=0;i<prod.size();i++)
		{
			int f=0;
			String ele="";
			for(int j=1;j<prod.get(i).size();j++)
			{
				if(prod.get(i).get(0).toString().charAt(0)==prod.get(i).get(j).toString().charAt(0))
				{
					f=1;
					ele=prod.get(i).get(j).toString();
					break;
				}
			}
			if(f==0)
			{
				String t1=prod.get(i).toString().replace("[","").replace("]","").replaceFirst(",","->").replace(",","/").replace(" ","");
				result.add(t1);
			}
			else
			{
				String t1=prod.get(i).get(0).toString()+"'->"+ele.substring(1,ele.length())+prod.get(i).get(0)+"'/Ɛ";
				result.add(t1);
				if(prod.get(i).size()==2)
					result.add(prod.get(i).get(0).toString()+"->Ɛ");
				else
				{
					String te="";
					for(int x=1;x<prod.get(i).size();x++)
					{
						if(!prod.get(i).get(x).toString().equals(ele))
						{
							te=te+prod.get(i).get(x).toString()+prod.get(i).get(0)+"'/";
						}
					}
					result.add(prod.get(i).get(0)+"->"+te.substring(0,te.length()-1));
				}
			}
		}
		print(result.toString());
	}
	public static void leftfact()
	{
		for(int i=0;i<prod.size();i++)
		{
			if(prod.get(i).size()>2)
			{
				String t1=prod.get(i).get(1).toString();
				String t2=prod.get(i).get(2).toString();
				String common="";
				for(int j=0;j<t1.length();j++)
				{
					if(t1.charAt(j)==t2.charAt(j))
						common=common+Character.toString(t1.charAt(j));
					else
						break;
				}
				if(common.length()==0)
				{
					String t3=prod.get(i).toString().replace("[","").replace("]","").replaceFirst(",","->").replace(",","/").replace(" ","");
					result.add(t3);
				}
				else
				{
					String te="",te1="";
					for(int j=1;j<prod.get(i).size();j++)
					{
						if(!prod.get(i).get(j).toString().contains(common))
							te=te+prod.get(i).get(j).toString()+"/";
						else
							te1=te1+prod.get(i).get(j).toString().replace(common,"")+"/";
					}
					result.add(prod.get(i).get(0)+"->"+common+prod.get(i).get(0)+"'/"+te.substring(0,te.length()-1));
					result.add(prod.get(i).get(0)+"'->"+te1.substring(0,te1.length()-1));
				}
			}
			else
			{
				String t3=prod.get(i).toString().replace("[","").replace("]","").replaceFirst(",","->").replace(",","/").replace(" ","");
				result.add(t3);
			}
		}
		print(result.toString());
	}
	public static void first(char a)
	{
		if(!Character.isUpperCase(a))
			result.add(Character.toString(a));
		else
		{
			for(int i=0;i<prod.size();i++)
			{
				if(prod.get(i).get(0).toString().charAt(0)==a)
				{
					for(int j=1;j<prod.get(i).size();j++)
					{
						if(!Character.isUpperCase(prod.get(i).get(j).toString().charAt(0)))
							result.add(Character.toString(prod.get(i).get(j).toString().charAt(0)));
						else if(prod.get(i).get(j).equals("Ɛ"))
							result.add("Ɛ");
						else
						{
							if(prod.get(i).get(j).toString().charAt(0)!=a)
							{
								first(prod.get(i).get(j).toString().charAt(0));
								for(int k=1;k<prod.get(i).get(j).toString().length();k++)
								{
									if(result.contains("Ɛ"))
									{
										result.remove("Ɛ");
										first(prod.get(i).get(j).toString().charAt(k));
									}
									else
										break;
								}
							}
						}
					}
				}
			}
		}
	}
	public static void follow(char a)
	{
		if(prod.get(0).get(0).toString().charAt(0)==a)
			result.add("$");
		for(int i=0;i<prod.size();i++)
		{
			for(int j=1;j<prod.get(i).size();j++)
			{
				int in=prod.get(i).get(j).toString().indexOf(a);
				if(in!=-1)
				{
					if(in+1<prod.get(i).get(j).toString().length())
					{
						for(int k=in+1;k<prod.get(i).get(j).toString().length();k++)
						{
							first(prod.get(i).get(j).toString().charAt(k));
							if(result.contains("Ɛ"))
							{
								result.remove("Ɛ");
								continue;
							}
							else
								break;
						}
					}
					else if(in+1>=prod.get(i).get(j).toString().length())
						if(a!=prod.get(i).get(0).toString().charAt(0))
							follow(prod.get(i).get(0).toString().charAt(0));
				}
			}
		}
	}
	public static void lead(char a)
	{
		for(int i=0;i<prod.size();i++)
		{
			if(prod.get(i).get(0).toString().charAt(0)==a)
			{
				for(int j=1;j<prod.get(i).size();j++)
				{
					if(!Character.isUpperCase(prod.get(i).get(j).toString().charAt(0)))
						result.add(Character.toString(prod.get(i).get(j).toString().charAt(0)));
					else if(prod.get(i).get(j).equals("Ɛ"))
						result.add("Ɛ");
					else if(Character.isUpperCase(prod.get(i).get(j).toString().charAt(0)) && prod.get(i).get(j).toString().length()>1)
					{
						if(!Character.isUpperCase(prod.get(i).get(j).toString().charAt(1)))
							result.add(Character.toString(prod.get(i).get(j).toString().charAt(1)));
						else
							if(prod.get(i).get(j).toString().charAt(0)!=a)
								lead(prod.get(i).get(j).toString().charAt(0));
					}
					else
						if(prod.get(i).get(j).toString().charAt(0)!=a)
							lead(prod.get(i).get(j).toString().charAt(0));
				}
			}
		}
	}	
	public static void trail(char a)
	{
		for(int i=0;i<prod.size();i++)
		{
			if(prod.get(i).get(0).toString().charAt(0)==a)
			{
				for(int j=1;j<prod.get(i).size();j++)
				{
					if(!Character.isUpperCase(prod.get(i).get(j).toString().charAt(prod.get(i).get(j).toString().length()-1)))
						result.add(Character.toString(prod.get(i).get(j).toString().charAt(prod.get(i).get(j).toString().length()-1)));
					else if(prod.get(i).get(j).equals("Ɛ"))
						result.add("Ɛ");
					else if(Character.isUpperCase(prod.get(i).get(j).toString().charAt(prod.get(i).get(j).toString().length()-1)) && prod.get(i).get(j).toString().length()>1)
					{
						if(!Character.isUpperCase(prod.get(i).get(j).toString().charAt(prod.get(i).get(j).toString().length()-2)))
							result.add(Character.toString(prod.get(i).get(j).toString().charAt(prod.get(i).get(j).toString().length()-2)));
						else
							trail(prod.get(i).get(j).toString().charAt(prod.get(i).get(j).toString().length()-1));
					}
					else
						trail(prod.get(i).get(j).toString().charAt(prod.get(i).get(j).toString().length()-1));
				}
			}
		}
	}
	public static void main(String args[]) throws IOException
	{
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
		System.out.print("Enter Number of Productions:- ");
		int nop=Integer.parseInt(br.readLine());
		for(int i=0;i<nop;i++)
		{
			String in=br.readLine();
			List<String> temp=new ArrayList<String>(Arrays.asList(in.split("->")));
			List<String> temp1=new ArrayList<String>(Arrays.asList(temp.get(1).toString().split("/")));
			temp.remove(1);
			for(int j=0;j<temp1.size();j++)
				temp.add(temp1.get(j));
			prod.add(temp);
		}
		print(prod.toString());
		int ch=1;
		while(ch<7)
		{
			print("1. Left Recursion");
			print("2. Left Factoring");
			print("3. First");
			print("4. Follow");
			print("5. Leading");
			print("6. Trailling");
			print("7. Exit");
			print("Enter Your Choice:- ");
			ch=Integer.parseInt(br.readLine());
			if(ch==1)
			{
				result.clear();
				leftrec();
			}
			else if(ch==2)
			{
				result.clear();
				leftfact();
			}
			else if(ch==3)
			{
				for(int i=0;i<prod.size();i++)
				{
					result.clear();
					first(prod.get(i).get(0).toString().charAt(0));
					Set<String> s=new HashSet<String>(result);
					print("FIRST OF "+prod.get(i).get(0)+" is: - "+s.toString());
				}
			}
			else if(ch==4)
			{
				for(int i=0;i<prod.size();i++)
				{
					result.clear();
					follow(prod.get(i).get(0).toString().charAt(0));
					Set<String> s=new HashSet<String>(result);
					print("Follow OF "+prod.get(i).get(0)+" is: - "+s.toString());
				}
			}
			else if(ch==5)
			{
				for(int i=0;i<prod.size();i++)
				{
					result.clear();
					lead(prod.get(i).get(0).toString().charAt(0));
					Set<String> s=new HashSet<String>(result);
					print("Leading OF "+prod.get(i).get(0)+" is: - "+s.toString());
				}
			}
			else if(ch==6)
			{
				for(int i=0;i<prod.size();i++)
				{
					result.clear();
					trail(prod.get(i).get(0).toString().charAt(0));
					Set<String> s=new HashSet<String>(result);
					print("Trailling OF "+prod.get(i).get(0)+" is: - "+s.toString());
				}
			}
		}
	}
}		
		
